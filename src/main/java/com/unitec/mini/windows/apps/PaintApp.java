package com.unitec.mini.windows.apps;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

import com.unitec.mini.windows.logic.User;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;
/**
 *
 * @author leonel
 */
public class PaintApp extends JInternalFrame  implements AppInterface {
    User userAuthen;
    private List<ImageIcon> imageList;
    private int currentIndex;

    public PaintApp(User user) {
        this.userAuthen = user;

        initComponents();
        setComponents();
    }

    public void setComponents(){
        this.setTitle("Visor de im√°genes");
        try {
            
            String userPath = "/src/main/users" + File.separator + "admin";
            String projectDir = System.getProperty("user.dir") + userPath;
            File userRootdir = new File(projectDir);
            loadImages(userRootdir);
        } catch (Exception e) {
            
        }

        imageList = new ArrayList<>();
        currentIndex = 0;  
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_MainPanel = new javax.swing.JPanel();
        jLabel_MainImage = new javax.swing.JLabel();
        jPanel_Bottton = new javax.swing.JPanel();
        jButton_Previous = new javax.swing.JButton();
        jPanelSlider = new javax.swing.JPanel();
        jButton_Next = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_OpenFolder = new javax.swing.JMenuItem();
        jMenuItem_SaveImages = new javax.swing.JMenuItem();

        setBackground(new java.awt.Color(140, 136, 136));
        setClosable(true);
        setIconifiable(true);
        setTitle("Media Player");

        jPanel_MainPanel.setLayout(new java.awt.BorderLayout());

        jLabel_MainImage.setPreferredSize(new Dimension(400, 300));
        jPanel_MainPanel.add(jLabel_MainImage, java.awt.BorderLayout.CENTER);

        jButton_Previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paint/icons-previous.png"))); // NOI18N
        jButton_Previous.setToolTipText("Previous Image");
        jButton_Previous.setFocusable(false);
        jButton_Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PreviousActionPerformed(evt);
            }
        });

        jPanelSlider.setBackground(new Color(0,0,0));
        jPanelSlider.setOpaque(false);
        jPanelSlider.setPreferredSize(new java.awt.Dimension(600, 80));
        jPanelSlider.setSize(new java.awt.Dimension(600, 70));
        jPanelSlider.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_Next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paint/icons-last.png"))); // NOI18N
        jButton_Next.setToolTipText("Next Image");
        jButton_Next.setFocusable(false);
        jButton_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_BotttonLayout = new javax.swing.GroupLayout(jPanel_Bottton);
        jPanel_Bottton.setLayout(jPanel_BotttonLayout);
        jPanel_BotttonLayout.setHorizontalGroup(
            jPanel_BotttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_BotttonLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton_Previous)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton_Next)
                .addGap(81, 81, 81))
        );
        jPanel_BotttonLayout.setVerticalGroup(
            jPanel_BotttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_BotttonLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel_BotttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_Next)
                    .addComponent(jPanelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Previous))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel_MainPanel.add(jPanel_Bottton, java.awt.BorderLayout.PAGE_END);

        jMenu1.setText("File");

        jMenuItem_OpenFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem_OpenFolder.setText("Open");
        jMenuItem_OpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenFolderActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_OpenFolder);

        jMenuItem_SaveImages.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem_SaveImages.setText("Save");
        jMenuItem_SaveImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveImagesActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_SaveImages);

        jMenuBar.add(jMenu1);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 955, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_OpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenFolderActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = fileChooser.getSelectedFile();
            loadImages(selectedFolder);
        }
    }//GEN-LAST:event_jMenuItem_OpenFolderActionPerformed

    private void jButton_PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PreviousActionPerformed
        showImage(--currentIndex);
        highlightSelectedThumbnail(currentIndex);
    }//GEN-LAST:event_jButton_PreviousActionPerformed

    private void jButton_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NextActionPerformed
        showImage(++currentIndex);
        highlightSelectedThumbnail(currentIndex);
    }//GEN-LAST:event_jButton_NextActionPerformed

    private void jMenuItem_SaveImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveImagesActionPerformed
        
    }//GEN-LAST:event_jMenuItem_SaveImagesActionPerformed

    private void loadImages(File folder) {
        imageList.clear();
        currentIndex = 0;

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                File[] files = folder.listFiles();

                if (files != null) {
                    for (File file : files) {
                        if (file.isFile() && isImageFile(file)) {
                            ImageIcon imageIcon = new ImageIcon(file.getAbsolutePath());
                            imageList.add(imageIcon);
                        }
                    }

                    // Show the first image
                    if (!imageList.isEmpty()) {
                        showImage(currentIndex);
                        populateThumbnailCarousel();
                    }
                }
            }
        });

        executorService.shutdown();
    }
    
    private boolean isImageFile(File file) {
        String name = file.getName().toLowerCase();
        return name.endsWith(".jpg") || name.endsWith(".jpeg") || name.endsWith(".png") || name.endsWith(".gif");
    }

    private void showImage(int index) {
        if (index < 0) {
            index = imageList.size() - 1;
        } else if (index >= imageList.size()) {
            index = 0;
        }

        if (!imageList.isEmpty()) {
           ImageIcon originalIcon = imageList.get(index);
           Image originalImage = originalIcon.getImage();
        
            int targetWidth = jLabel_MainImage.getWidth();
            int targetHeight = jLabel_MainImage.getHeight();

            Image scaledImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel_MainImage.setIcon(scaledIcon);

            currentIndex = index;
            highlightSelectedThumbnail(currentIndex);
        }
    }
    
    private void populateThumbnailCarousel() {
        jPanelSlider.removeAll();
       
        int rows = 1; 
        int cols = imageList.size();
        jPanelSlider.setLayout(new GridLayout(rows, cols, 5, 5));

    
        for (ImageIcon imageIcon : imageList) {
            Image originalImage = imageIcon.getImage();
            Image scaledImage = originalImage.getScaledInstance(50, 50, Image.SCALE_SMOOTH);

            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            JLabel thumbnailLabel = new JLabel(scaledIcon);
            
    
            thumbnailLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int thumbnailIndex = jPanelSlider.getComponentZOrder(thumbnailLabel);
                    showImage(thumbnailIndex);
                    highlightSelectedThumbnail(thumbnailIndex);
                }
            });

             jPanelSlider.add(thumbnailLabel);
        }

        jPanelSlider.revalidate();
        jPanelSlider.repaint();
    }
    
    private void highlightSelectedThumbnail(int selectedIndex) {
        Component[] components = jPanelSlider.getComponents();

        for (int i = 0; i < components.length; i++) {
            if (components[i] instanceof JLabel) {
                JLabel thumbnailLabel = (JLabel) components[i];
                thumbnailLabel.setBorder(null);
                if (i == selectedIndex) {
                    Border lineBorder = BorderFactory.createLineBorder(Color.RED, 2);
                    Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);
                    thumbnailLabel.setBorder(BorderFactory.createCompoundBorder(lineBorder, emptyBorder));
                }
            }
        }
    }

    @Override
    public void closeFrame() {
        try {
            this.setClosed(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Next;
    private javax.swing.JButton jButton_Previous;
    private javax.swing.JLabel jLabel_MainImage;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItem_OpenFolder;
    private javax.swing.JMenuItem jMenuItem_SaveImages;
    private javax.swing.JPanel jPanelSlider;
    private javax.swing.JPanel jPanel_Bottton;
    private javax.swing.JPanel jPanel_MainPanel;
    // End of variables declaration//GEN-END:variables
}
